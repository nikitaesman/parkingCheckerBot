import TelegramBot from "node-telegram-bot-api";
import { ParkingDataStore } from "../store/ParkingDataStore";
import { SubscribesStore } from "../store/SubscribesStore";
import { ChatsStore } from "../store/ChatsStore";

export interface MessageHandlersParams {
	bot: TelegramBot
	parkingDataStore: ParkingDataStore;
	subscribesStore: SubscribesStore;
	chatsStore: ChatsStore
}

export const messageHandlers = (params: MessageHandlersParams) => {
	const {
		bot,
		parkingDataStore,
		subscribesStore,
		chatsStore
	} = params

	bot.onText(/\/start/, async (msg) => {
		const chatId = msg.chat.id;
		const firstName = msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

		chatsStore.addChat(chatId)

		await bot.sendMessage(chatId, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –∑–æ–Ω. \n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:`, {
			reply_markup: {
				keyboard: [[{ text: '–°–ø–∏—Å–æ–∫ –∑–æ–Ω', },{ text: '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞', }]],
				resize_keyboard: true,
				one_time_keyboard: true
			}
		});
	});
 
	bot.onText(/–°–ø–∏—Å–æ–∫ –∑–æ–Ω/, async (msg) => {
		const chatId = msg.chat.id;
		try {
			chatsStore.addChat(chatId)

			const responseMes = "–ù–∞—á–∞–ª–∞—Å—å –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –∑–æ–Ω –≤ –ó–∞–ø–∞–¥–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –æ–∫—Ä—É–≥–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞:\n"

			await bot.sendMessage(chatId, responseMes)

			await bot.sendMessage(chatId, "–ï—Å–ª–∏ –≤—ã –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∑–æ–Ω—É, —Ç–æ –≤ –ø–æ—Å–ª–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (—Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç) –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–æ–Ω. –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –∑–æ–Ω–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∞–∫—Ç–∏–≤–Ω–∞, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

			const parkingDataList = parkingDataStore.parkingDataList

			const chatSubscribers = subscribesStore.getSubscribesByChatId(chatId)

			const strings: string[] = parkingDataList.map((parkingData, i) => {
				const isSubscribe = chatSubscribers.find((el) => el.parkingZoneId === parkingData.id)

				const statusMes = parkingData.enable ? "–î–æ—Å—Ç—É–ø–Ω–∞ üü©" : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üü•"

				const subMes = isSubscribe ? "üü¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:" : ""

				const text = `${i + 1}. ${subMes} ${parkingData.text}: (ID: ${parkingData.id}) ${statusMes}\n`

				return text
			})

			const zonesMes = "–°–ø–∏—Å–æ–∫ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –∑–æ–Ω –≤ –ó–∞–ø–∞–¥–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –æ–∫—Ä—É–≥–µ:\n" + strings.join('\n\n')

			await bot.sendMessage(chatId, zonesMes)

			const zoneSubscribeButtonsList = parkingDataList.map((parkingData, i) => {
				const isSubscribe = chatSubscribers.find((el) => el.parkingZoneId === parkingData.id)

				let button: TelegramBot.InlineKeyboardButton

				const text = `${i + 1}.`

				if (isSubscribe) {
					button = {
						text: `üü•–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∑–æ–Ω—ã ${text}`,
						callback_data: `/unsubscribe ${parkingData.id}`,
					}
				} else {
					button = {
						text: `üü¶–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–æ–Ω—É ${text}`,
						callback_data: `/subscribe ${parkingData.id}`,
					}
				}

				return button
			})

			const noFlatButtonsList = zoneSubscribeButtonsList.reduce((acc: [TelegramBot.InlineKeyboardButton][], el) => {
				acc.push([el])

				return acc
			}, [])

			await bot.sendMessage(chatId, "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–æ–Ω—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é", {
				reply_markup: {
					inline_keyboard: noFlatButtonsList,
					resize_keyboard: true,
					one_time_keyboard: false
				}
			})
		} catch (e: any) {
			await bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: error: ${e}`)
		}
	})

	bot.on('callback_query', async (query) => {
		const chatId = query?.message?.chat.id;
		const text = query.data; // —ç—Ç–æ "B1" –∏–ª–∏ "B2")

		if (!chatId || !text) {
			await bot.answerCallbackQuery(query.id);

			return
		}

		chatsStore.addChat(chatId)

		if (text?.startsWith('/subscribe')) {
			const parts = text.split(' '); // ['/subscribe', '123']
			const zoneId = Number(parts[1]);

			const isExistZoneId = parkingDataStore.parkingDataList.find((el) => el.id === zoneId)

			if (!isExistZoneId) {
				console.log("isExistZoneId",isExistZoneId);
				await bot.sendMessage(chatId, `–ó–æ–Ω—ã —Å ID: ${zoneId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
				await bot.answerCallbackQuery(query.id);
				return
			}

			await subscribesStore.addSubscribe(chatId, zoneId)

			await bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–æ–Ω—ã ${isExistZoneId.text}`);
			await bot.answerCallbackQuery(query.id);

			return
		}

		if (text?.startsWith('/unsubscribe')) {
			const parts = text.split(' '); // ['/unsubscribe', '123']
			const zoneId = Number(parts[1]);

			const isExistZoneId = parkingDataStore.parkingDataList.find((el) => el.id === zoneId)

			if (!isExistZoneId) {
				await bot.sendMessage(chatId, `–ó–æ–Ω—ã —Å ID: ${zoneId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
				await bot.answerCallbackQuery(query.id);

				return
			}

			await subscribesStore.removeSubscribe(chatId, zoneId)

			await bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–æ–Ω—ã ${isExistZoneId.text}`);
			await bot.answerCallbackQuery(query.id);

			return
		}


		await bot.sendMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`)
		await bot.answerCallbackQuery(query.id);
	})

	// bot.on('message', async (msg) => {
	// 	const chatId = msg.chat.id;
	// 	const text = msg.text?.trim();

	// 	console.log("text", text);

	// 	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	// 	await bot.sendMessage(chatId, `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${text}`);
	// });
}